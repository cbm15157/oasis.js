defaults: &defaults
  docker:
    - image: circleci/node:10-browsers

restore_dependencies: &restore_dependencies
  restore_cache:
    keys:
       - v1-dependencies-{{ checksum "yarn.lock" }}
       # Fallback to using the latest cache if no exact match is found.
       - v1-dependencies-

save_dependencies: &save_dependencies
  save_cache:
    paths:
      - node_modules
    key: v1-dependencies-{{ checksum "yarn.lock" }}

version: 2
jobs:
  build:
    <<: *defaults

    steps:
      - checkout

      - <<: *restore_dependencies
      - run: yarn
      - <<: *save_dependencies

      - run: yarn lint
      - run: yarn build
      - run: yarn test
      - run: yarn coverage

      - run:
          # create an output directory with all the artifacts
          # generated by the build
          rm -rf output; mkdir -p output; for package in $(ls packages); do mkdir output/$package; cp -r  packages/$package/dist/* output/$package/; done

      - store_artifacts:
          path: output
      - persist_to_workspace:
          root: .
          paths:
            - output

  deploy-staging:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          # CircleCI's AWS Credentials are allowed to assume a role that has S3
          # access in the staging account. 
          name: Create an ~/.aws/config file to assume the staging role for aws. 
          command: mkdir -p ~/.aws && printf "[profile staging]\nrole_arn = ${AWS_STAGING_ROLE_ARN}\ncredential_source = Environment\n" > ~/.aws/config
      - attach_workspace:
          at: oasis-client
      - run:
          name: Deploy to S3
          command: aws s3 sync --profile staging output/ s3://oasis-client-staging/oasis-client-latest/ --delete

  deploy-release:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          # CircleCI's AWS Credentials are allowed to assume a role that has S3
          # access in the staging account. 
          name: Create an ~/.aws/config file to assume the staging role for aws. 
          command: mkdir -p ~/.aws && printf "[profile staging]\nrole_arn = ${AWS_STAGING_ROLE_ARN}\ncredential_source = Environment\n" > ~/.aws/config
      - attach_workspace:
          at: oasis-client
      - run:
          name: Deploy to S3
          command: aws s3 sync --profile staging output/ s3://oasis-client-staging/oasis-client/${CIRCLE_TAG}/ --delete

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-release:
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only: /^@oasislabs*/
          
